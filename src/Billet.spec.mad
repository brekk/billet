import type { AssertionError } from "Test"
import type { Wish } from "Wish"

import Dict from "Dictionary"
import IO from "IO"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import String from "String"
import { assertEquals, test } from "Test"
import Wish from "Wish"

import { captured, parsed } from "@/Processor"
import {
  Tag,
  getScope,
  hasScope,
  isNegated,
  isScoped,
  parseMany,
  scopeEqual,
  scopeWithinScope,
  scopedTag,
  serializeTag,
  tag,
  tagInScope,
  untag,
} from "@/Tag"
import { testCases } from "@/Test"



processNothing = (_, b) => b

SCOPES = [scopedTag(["deep"], "info"), tag("warn"), tag("log"), scopedTag(["a", "b", "c"], "issue")]
test(
  "makeRawLogger",
  () => do {
    alog = captured(processNothing, SCOPES)
    _ <- assertEquals(alog(Tag(true, ["deep"], "info"), "[deep] info!"), Just("[deep] info!"))
    _ <- assertEquals(alog(Tag(true, [], "info"), "info info!"), Just("info info!"))
    _ <- assertEquals(alog(Tag(true, [], "unmatched"), "info info!"), Nothing)
    _ <- assertEquals(alog(Tag(true, ["deeply"], "issue"), "skip me!"), Nothing)
    _ <- assertEquals(
      alog(Tag(true, ["a", "b", "*"], "issue"), "don't skip me!"),
      Just("don't skip me!"),
    )
    return assertEquals(
      alog(Tag(true, ["deep", "nested"], "info"), "info info!"),
      Just("info info!"),
    )
  },
)

test(
  "parsed",
  () => do {
    alog = parsed(processNothing, SCOPES)
    _ <- assertEquals(alog("info:deep", "[deep] info!"), "[deep] info!")
    _ <- assertEquals(alog("info", "information"), "information")
    _ <- assertEquals(alog("unmatched", "unlogged"), "unlogged")
    _ <- assertEquals(alog("issue:whatever", "skip me!"), "skip me!")
    _ <- assertEquals(alog("info:deep:nested", "info deeply nested!"), "info deeply nested!")
    _ <- assertEquals(alog("*", "k fun star star!"), "k fun star star!")
    _ <- assertEquals(alog("info:*", "info star"), "info star")
    return assertEquals(alog("issue:a:b:*", "issue nested star"), "issue nested star")
  },
)
