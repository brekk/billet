import type { AssertionError } from "Test"
import type { Wish } from "Wish"

import Dict from "Dictionary"
import IO from "IO"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import String from "String"
import { assertEquals, test } from "Test"

import Billet from "@/Billet"
import { Tag, tag } from "@/Billet"



// testCases :: (Show b, Eq b) => String -> (a -> b) -> Dictionary a b -> Wish TestResult TestResult
testCases = (fn, name, testDict) => pipe(
  Dict.mapWithKey((input, output) => assertEquals(fn(input), output)),
  Dict.values,
  (cases) => test(
    name,
    () => pipe(
      List.last,
      fromMaybe(assertEquals("testCases", "failed")),
    )(cases),
  ),
)(testDict)

testParseScopes = testCases(Billet.parseScopes)
testParseScopes(
  "parseScopes - single tags",
  {{
    "yo": [Billet.scopedTag(Nothing, "yo")],
    "scoped:yo": [Billet.scopedTag(Just(["scoped"]), "yo")],
  }},
)
testParseScopes(
  "parseScopes - multiple tags",
  {{
    "a, b, spaced": [Billet.tag("a"), Billet.tag("b"), Billet.tag("spaced")],
    "a,b:belabor": [Billet.tag("a"), Billet.scopedTag(Just(["b"]), "belabor")],
  }},
)
testParseScopes("parseScopes - various garbage", {{ "": [Billet.tag("")], ",,": [] }})
