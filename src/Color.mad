import { ge } from "Compare"
import Float from "Float"
import Integer from "Integer"
import Random from "Random"
import Term from "Terminal"

import { ANSI_BACKGROUND, ANSI_FOREGROUND, FULL_CHANNEL, HALF_CHANNEL } from "@/Color/Constants"
import { channelB, channelG, channelR } from "@/Color/Math"
import { colorFromSeed } from "@/Color/Random"



export alias Color a = #[a, a, a]
export BLACK = #[0, 0, 0]
export WHITE = #[FULL_CHANNEL, FULL_CHANNEL, FULL_CHANNEL]

// derive Comparable Color a

export toInteger = where {
  #[r, g, b] =>
    r + g + b
}

export toFloat = where {
  #[r, g, b] =>
    16 + (36 * (r / 255 * 5)) + (6 * (g / 255 * 5)) + (b / 255 * 5)
}

export toTupleFloat = where {
  #[r, g, b] =>
    #[Integer.toFloat(r), Integer.toFloat(g), Integer.toFloat(b)]
}

export toTupleInt = where {
  #[r, g, b] =>
    #[Float.toInteger(r), Float.toInteger(g), Float.toInteger(b)]
}

export toRGB = (v) => {
  r = channelR(v)
  g = channelG(v)
  b = channelB(v)
  return #[r, g, b]
}


toList :: Color a -> List a
export toList = where {
  #[r, g, b] =>
    [r, g, b]
}


isMid = ge($, HALF_CHANNEL)

mixer :: (Color a -> Color a -> Color b) -> Color a -> Color a -> Color b
export mixer = (mix, a, b) => mix(a, b)

seeded :: String -> String -> List String
export seeded = (seedPrefix, str) => pipe(
  mappend(seedPrefix),
  Random.generateFromString,
  colorFromSeed,
  (color) => {
    black = pipe(
      toTupleFloat,
      isLuminous,
    )(color)
    return where(color) {
      #[r, g, b] =>
        do {
          blackChannel = black ? 0 : FULL_CHANNEL
          return map(show)([
            ANSI_FOREGROUND,
            2,
            blackChannel,
            blackChannel,
            blackChannel,
            ANSI_BACKGROUND,
            2,
            r,
            g,
            b,
          ])
        }
    }
  },
)(str)


luminance :: Color Float -> Color Float
export luminance = where {
  #[r, g, b] =>
    #[(r * 0.2126), (g * 0.7152), (b * 0.0722)]
}

isLuminous :: Color Float -> Boolean
isLuminous = pipe(
  luminance,
  toInteger,
  isMid,
)

contrastL :: Color Float -> Integer
export contrastL = pipe(
  luminance,
  toFloat,
  (x) => isMid(x) ? 0x000000 : 0xffffff,
)
contrastColor :: Color Float -> Color Float
export contrastColor = pipe(
  contrastL,
  (x) => x >= HALF_CHANNEL ? WHITE : BLACK,
)
