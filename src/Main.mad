import Dict from "Dictionary"
import IO from "IO"
import { fromMaybe } from "Maybe"
import Process from "Process"

import { makeDebugLogger, makeParsedLogger, makeRawLogger } from "@/Log"
import { makeStyledProcessor } from "@/Processor"
import { Tag, scopedTag, tag } from "@/Tag"



main = () => {
  SCOPES = [
    scopedTag([], "a"),
    scopedTag(["deep"], "info"),
    tag("warn"),
    tag("log"),
    scopedTag(["a", "b", "c"], "issue"),
  ]
  // IO.pTrace("ARGV", Process.Argv)
  // IO.pTrace("ENV", Process.Env)
  alog = makeRawLogger(SCOPES)
  // these are inconvenient at call-time unless partially applied
  alog(Tag(true, ["deep"], "info"), "[deep] info!")
  alog(Tag(true, [], "info"), "info info")
  alog(Tag(true, ["deeply", "nested"], "info"), "skipping deeply.nested")
  alog(Tag(true, [], "log"), "log")
  alog(Tag(true, [], "warning"), "this is skipped")
  // these parse a tag:scope string
  blog = makeParsedLogger(SCOPES)
  blog("*", "k fun star star!")
  blog("info:deep", "info:deep with parsies!")
  blog("info:*", "info star!")
  makeStyledLogger = makeStyledProcessor("style", IO.pTrace)
  // these parse a tag:scope string and colorize it
  slog = makeStyledLogger(SCOPES)
  slog("*", "colorful starstar!")
  slog("info:deep", "colorful info:deep")
  slog("issue:a:b:c", "colorful alpha issue")
  slog("issue:a:*", "colorful nested issue")
  pipe(
    slog("a:input"),
    (a) => a ++ " there",
    slog("a:output"),
  )("hey")
  debug = makeDebugLogger("style", Process.Env)

  debug("*", "debugular starstar!")
  debug("info:deep", "debugular info:deep")
  debug("issue:a:b:c", "debuglar alpha issue")
  debug("issue:a:*", "debarge nested issue")
}
