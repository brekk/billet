import type { Lazy } from "@/LazyProcessor"
import type { Invocable } from "@/Processor"

import Dict from "Dictionary"
import IO from "IO"
import { Just, fromMaybe } from "Maybe"
import Process from "Process"
import Wish from "Wish"

import Lazy from "@/LazyProcessor"
import { debug, parsed, raw } from "@/Log"
import Pro from "@/Processor"
import { Tag, fromString, scoped, tag, untag } from "@/Tag"



main = () => {
  SCOPES = [
    scoped("a", []),
    scoped("info", ["deep"]),
    tag("warn"),
    tag("log"),
    scoped("issue", ["a", "b", "c"]),
    untag("ignore"),
  ]
  // IO.pTrace("ARGV", Process.Argv)
  // IO.pTrace("ENV", Process.Env)
  alog = raw(SCOPES)
  // these are inconvenient at call-time unless partially applied
  alog(Tag(true, "info", ["deep"]), "[deep] info!")
  alog(Tag(true, "info", []), "info info")
  alog(Tag(true, "info", ["deeply", "nested"]), "skipping deeply.nested")
  alog(Tag(true, "log", []), "log")
  alog(Tag(true, "warning", []), "this is skipped")
  alog(Tag(true, "ignore", []), "this is skipped?")
  // these parse a tag:scope string
  blog = parsed(SCOPES)
  blog("*", "k fun star star!")
  blog("info:deep", "info:deep with parsies!")
  blog("info:*", "info star!")
  styledLogger = Pro.styled("style", IO.pTrace)
  // these parse a tag:scope string and colorize it
  slog = styledLogger(SCOPES)
  slog("*", "colorful starstar!")
  slog("info:deep", "colorful info:deep")
  slog("issue:a:b", "colorful alpha issue")
  slog("issue:a:*", "colorful nested issue")
  slog("ignore", "ignored message!")
  pipe(
    slog("a:input"),
    (a) => a ++ " there",
    slog("a:output"),
  )("hey")
  dlog = debug("style", Process.Env)

  dlog("*", "debugular starstar!")
  dlog("info:deep", "debugular info:deep")
  dlog("issue:a:b:c", "debuglar alpha issue")
  dlog("issue:a:*", "debarge nested issue")
  dlog("warning", "exclude warning")
  sloth = Lazy.lazy(slog)
  // sloth(IO.pTrace, [], Tag([], ""))
  IO.pTrace("SLOTH", sloth)
  moss = sloth(SCOPES, scoped("*", []), "debugular info")
  IO.pTrace("MOSS", moss)
  pipe(
    Lazy.transform(Pro.composed),
    // Lazy.transform(Pro.captured),
    Wish.fulfill((x) => { IO.pTrace("FAIL", x) }, (x) => { IO.pTrace("SUCCESS", x) }),
  )(moss)
}
