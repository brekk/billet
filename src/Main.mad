import Dict from "Dictionary"
import IO from "IO"
import { Just, fromMaybe } from "Maybe"
import Process from "Process"

import { debug, parsed, raw } from "@/Log"
import Pro from "@/Processor"
import { Tag, parse, scoped, tag } from "@/Tag"



main = () => {
  SCOPES = [
    scoped([], "a"),
    scoped(["deep"], "info"),
    tag("warn"),
    tag("log"),
    scoped(["a", "b", "c"], "issue"),
  ]
  // IO.pTrace("ARGV", Process.Argv)
  // IO.pTrace("ENV", Process.Env)
  alog = raw(SCOPES)
  // these are inconvenient at call-time unless partially applied
  alog(Tag(true, ["deep"], "info"), "[deep] info!")
  alog(Tag(true, [], "info"), "info info")
  alog(Tag(true, ["deeply", "nested"], "info"), "skipping deeply.nested")
  alog(Tag(true, [], "log"), "log")
  alog(Tag(true, [], "warning"), "this is skipped")
  // these parse a tag:scope string
  blog = parsed(SCOPES)
  blog("*", "k fun star star!")
  blog("info:deep", "info:deep with parsies!")
  blog("info:*", "info star!")
  styledLogger = Pro.styled("style", IO.pTrace)
  // these parse a tag:scope string and colorize it
  slog = styledLogger(SCOPES)
  slog("*", "colorful starstar!")
  slog("info:deep", "colorful info:deep")
  slog("issue:a:b:c", "colorful alpha issue")
  slog("issue:a:*", "colorful nested issue")
  pipe(
    slog("a:input"),
    (a) => a ++ " there",
    slog("a:output"),
  )("hey")
  dlog = debug("style", Process.Env)

  dlog("*", "debugular starstar!")
  dlog("info:deep", "debugular info:deep")
  dlog("issue:a:b:c", "debuglar alpha issue")
  dlog("issue:a:*", "debarge nested issue")
  // issue = Pro.invoke(Pro.composed)
  call = Pro.Processor(IO.pTrace, [])
  pipe(
    call(Tag(true, [], "*")),
    IO.pTrace("ISSUE"),
    Pro.prepare(Pro.composed),
    IO.pTrace("composed!"),
    Pro.invoke,
    IO.pTrace("value!"),
  )("YOYOYO")
  /*
      pipe(
        call(Tag(true, [], "*")),
        IO.pTrace("ISSUE"),
        Pro.prepare(Pro.captured),
        IO.pTrace("captured!"),
        Pro.invoke,
        IO.pTrace("captured value!"),
      )("Captured!")
      // */
  // issue("issue:a:b:c")
}
