import type { Maybe } from "Maybe"

import type { Tag } from "@/Tag"

import { Just, Nothing, fromMaybe } from "Maybe"

import { ansiFgBg, seededAnsi } from "@/Color"
import { TagString, convertTag, parse, serialize, within } from "@/Tag"



export composed = (run, tags, t, thing) => (within(tags, t) ? run(serialize(t), thing) : thing)

captured :: (String -> String -> String) -> List Tag -> Tag -> String -> Maybe String
export captured = (run, tags, t, thing) => if (within(tags, t)) {
  Nothing
} else {
  pipe(
    run(serialize(t)),
    Just,
  )(thing)
}

export parsed = (run, tags, t, thing) => pipe(
  parse,
  composed(run, tags, $, thing),
)(t)

export styled = (seedPrefix, run, raw) => parsed(
  (t, x) => pipe(
    seededAnsi(seedPrefix),
    ansiFgBg(t),
    run($, x),
  )(t),
)(raw)
