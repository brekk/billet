import { Just, Nothing } from "Maybe"
import String from "String"
import { assertEquals, test } from "Test"

import { captured, parsed, styled } from "@/Processor"
import { Tag, scoped, tag, untag } from "@/Tag"
import { demo } from "@/Test"



processNothing = (_, b) => b

SCOPES = [
  scoped("info", ["deep"]),
  tag("warn"),
  tag("log"),
  scoped("issue", ["a", "b", "c"]),
  untag("ignore"),
]
test(
  "makeRawLogger",
  () => do {
    alog = captured(processNothing, SCOPES)
    _ <- assertEquals(alog(Tag(true, "info", ["deep"]), "[deep] info!"), Just("[deep] info!"))
    _ <- assertEquals(alog(Tag(true, "info", []), "infoinfoinfo"), Nothing)
    _ <- assertEquals(alog(Tag(true, "unmatched", []), "nothing"), Nothing)
    _ <- assertEquals(alog(Tag(true, "issue", ["deeply"]), "[deeply] issue!"), Nothing)
    _ <- assertEquals(
      alog(Tag(true, "issue", ["a", "b", "*"]), "a:b:* -- issue"),
      Just("a:b:* -- issue"),
    )
    return assertEquals(
      alog(Tag(true, "info", ["deep", "nested"]), "deep:nested info!"),
      Just("deep:nested info!"),
    )
  },
)

test(
  "parsed",
  () => do {
    alog = parsed(processNothing, SCOPES)
    _ <- assertEquals(alog("info:deep", "[deep] info!"), "[deep] info!")
    _ <- assertEquals(alog("info", "information"), "information")
    _ <- assertEquals(alog("unmatched", "unlogged"), "unlogged")
    _ <- assertEquals(alog("issue:whatever", "skip me!"), "skip me!")
    _ <- assertEquals(alog("info:deep:nested", "info deeply nested!"), "info deeply nested!")
    _ <- assertEquals(alog("*", "k fun star star!"), "k fun star star!")
    _ <- assertEquals(alog("info:*", "info star"), "info star")
    return assertEquals(alog("issue:a:b:*", "issue nested star"), "issue nested star")
  },
)

test(
  "styled",
  () => do {
    STYLED_SCOPES = [
      scoped("a", []),
      scoped("info", ["deep"]),
      tag("warn"),
      tag("log"),
      scoped("issue", ["a", "b", "c"]),
    ]
    return pipe(
      styled("test", (_, b) => b),
      (slog) => slog("issue:a", "cool"),
      assertEquals("cool"),
    )(STYLED_SCOPES)
  },
)
