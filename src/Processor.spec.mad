import Dict from "Dictionary"
import { Just, Nothing } from "Maybe"
import { assertEquals, test } from "Test"

import { captured, parsed, styled } from "@/Processor"
import { Tag, scoped, tag, untag } from "@/Tag"
import { caseN2, report, reportBook } from "@/Test"



processNothing = (_, b) => b

SCOPES = [
  scoped("info", ["deep"]),
  tag("warn"),
  tag("log"),
  scoped("issue", ["a", "b", "c"]),
  untag("ignore"),
]
report(
  caseN2(captured(processNothing, SCOPES)),
  "captured",
  [
    #[#[scoped("info", ["deep"]), "[deep] info!"], Just("[deep] info!")],
    #[#[scoped("info", []), "nomatchmomatch"], Nothing],
    #[#[scoped("unmatched", []), "unmatched"], Nothing],
    #[#[scoped("issue", ["path"]), "[path] issue!"], Nothing],
    #[#[scoped("issue", ["a", "b"]), "a,b -- issue"], Nothing],
    #[#[scoped("info", ["deep", "nested"]), "deep,nested info!"], Just("deep,nested info!")],
  ],
)

report(
  caseN2(parsed(processNothing, SCOPES)),
  "parsed",
  [
    #[#["info:deep", "[deep] info!"], "[deep] info!"],
    #[#["info", "information"], "information"],
    #[#["unmatched", "unlogged"], "unlogged"],
    #[#["issue:whatever", "skip me!"], "skip me!"],
    #[#["info:deep:nested", "info deeply nested!"], "info deeply nested!"],
    #[#["*", "k fun star star!"], "k fun star star!"],
    #[#["info:*", "info star"], "info star"],
    #[#["issue:a:b:*", "issue nested star"], "issue nested star"],
  ],
)

test(
  "styled",
  () => do {
    STYLED_SCOPES = [
      scoped("a", []),
      scoped("info", ["deep"]),
      tag("warn"),
      tag("log"),
      scoped("issue", ["a", "b", "c"]),
    ]
    return pipe(
      styled("test", (_, b) => b),
      (slog) => slog("issue:a", "cool"),
      assertEquals("cool"),
    )(STYLED_SCOPES)
  },
)
