import type { Trace } from "@/Processor"
import type { Tag } from "@/Tag"

import Wish from "Wish"



export type Lazy a b = Lazy(Trace a b, List Tag, Tag, a)

export setTrace = (mod, x) => where(x) {
  Lazy(trace, tags, t, thing) =>
    Lazy(mod(trace), tags, t, thing)
}

export setTags = (mod, x) => where(x) {
  Lazy(trace, tags, t, thing) =>
    Lazy(trace, mod(tags), t, thing)
}

export setTag = (mod, x) => where(x) {
  Lazy(trace, tags, t, thing) =>
    Lazy(trace, tags, mod(t), thing)
}

export setValue = (mod, x) => where(x) {
  Lazy(trace, tags, t, thing) =>
    Lazy(trace, tags, t, mod(thing))
}

export lazy = (run, tags, t, thing) => pipe(
  Lazy(run, tags, t),
  Wish.good,
)(thing)

export call = (fn, x) => where(x) {
  Lazy(run, tags, t, thing) =>
    fn(run, tags, t, thing)
}

export transform = (fn, x) => chain(
  pipe(
    call(fn),
    of,
  ),
  x,
)
