import type { Maybe } from "Maybe"

import { equals } from "Function"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import String from "String"



indexOf :: Char -> String -> Maybe Integer
export indexOf = (needle, haystack) => {
  i = 0
  chars = String.toList(haystack)
  matched = false
  check = (_i) => pipe(
    String.charAt(_i),
    map(equals(needle)),
    fromMaybe(false),
  )(haystack)
  while(i <= List.length(chars) && !matched) do {
    if (check(i)) do {
      matched := true
    }
    i := i + 1
  }
  return matched ? Just(i) : Nothing
}
