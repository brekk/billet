import type { Comparison } from "Compare"
import type { Maybe } from "Maybe"

import type { Scope } from "@/Scope"

import { EQ, GT, LT } from "Compare"
import { always, equals, when } from "Function"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import String from "String"

import { withinScope } from "@/Scope"



export type Tag = Tag(Boolean, String, Scope)

instance Eq Tag {
  __EQ__ = (a, b) => serialize(a) == serialize(b)
}
instance Comparable Tag {
  compare = compareTag
}

scoped :: String -> Scope -> Tag
export scoped = Tag(true)

inverted :: String -> Scope -> Tag
export inverted = Tag(false)

tag :: String -> Tag
export tag = scoped($, [])
untag :: String -> Tag
export untag = inverted($, [])

isInverted :: Tag -> Boolean
export isInverted = where {
  Tag(x, _, _) =>
    !x
}

isScoped :: Tag -> Boolean
export isScoped = where {
  Tag(_, _, scope) =>
    List.length(scope) > 0
}


getScope :: Tag -> Scope
export getScope = where {
  Tag(_, _, scope) =>
    scope
}

// eventually we could actually Parse stuff
parse :: String -> Tag
export parse = (part) => {
  pos = !String.startsWith("-", part)
  return pipe(
    String.trim,
    String.split(":"),
    (list) => {
      seg = List.length(list) == 1 ? [] : List.tail(list)
      return pipe(
        _firstAsString,
        Tag(pos, $, seg),
      )(list)
    },
  )(part)
}


id :: Tag -> String
export id = where {
  Tag(_, name, _) =>
    name
}

tagScopeLength :: Tag -> Integer
export tagScopeLength = pipe(
  getScope,
  List.length,
)

compareTag :: Tag -> Tag -> Comparison
export compareTag = (a, b) => {
  aName = id(a)
  bName = id(b)

  return if (bName == aName) do {
    sA = tagScopeLength(a)
    sB = tagScopeLength(b)
    return if (sA == sB) {
      EQ
    } else if (sA > sB) {
      GT
    } else {
      LT
    }
  } else {
    EQ
  }
}

hasScope :: Scope -> Tag -> Boolean
export hasScope = (testScope, t) => pipe(
  getScope,
  equals(testScope),
)(t)

_firstAsString :: List String -> String
_firstAsString = pipe(
  List.first,
  fromMaybe(""),
)

_isStarTag :: List String -> Boolean
_isStarTag = List.endsWith(["*"])

inScope :: Boolean -> Scope -> Tag -> Boolean
export inScope = (neg, testScope, t) => pipe(
  getScope,
  when(_isStarTag, always([])),
  withinScope(neg, testScope),
)(t)

checkScopes :: Boolean -> Tag -> List Scope -> Boolean
export checkScopes = (neg, t, scopes) => List.any(inScope(neg, $, t), scopes)

serialize :: Tag -> String
export serialize = (t) => {
  scope = pipe(
    getScope,
    String.join(":"),
  )(t)
  name = id(t)
  return name ++ (equals("", scope) ? "" : ":" ++ scope)
}

// TODO: support inverted tags next
within :: List Tag -> Tag -> Boolean
export within = (tags, t) => {
  tId = id(t)
  neg = isInverted(t)
  return pipe(
    List.filter(
      pipe(
        id,
        (uId) => tId == "*" || uId == tId,
      ),
    ),
    map(getScope),
    checkScopes(neg, t),
  )(tags)
}


_isEmptyTag :: Tag -> Boolean
_isEmptyTag = pipe(
  id,
  equals(""),
)

parseMany :: String -> List Tag
export parseMany = pipe(
  String.split(","),
  map(parse),
  List.reject(_isEmptyTag),
)
