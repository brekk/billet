import type { Comparison } from "Compare"

import { EQ, GT, LT, gt } from "Compare"
import { complement, equals } from "Function"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import String from "String"
import Term from "Terminal"



export alias Scope = List String

/**
 * A tag is a human identifiable way of segmenting data:
 * - it has an `id` which is a String
 * - it can be negated, which allows for exclusion
 * - it can be scoped, which allows for filtering
 */
export type Tag = Tag(Boolean, String, Scope) | Wildcard

export alias TagList = List Tag

// instance Eq Tag {
//   __EQ__ = tagEqualsTag
// }
instance Comparable Tag {
  compare = compareTag
}

/*
normalizeTagList :: TagList -> TagList
normalizeTagList = (tags) => map(
  (t) => 
  tags
)
*/
import IO from "IO"



equalsTag = (a, b) => {
  iA = id(a)
  iB = id(b)
  sameId = iA == iB
  return if (isWild(a) || isWild(b)) {
    true
  } else if (isNegated(a) && sameId) do {
    return false
  } else {
    sameId
  }
}

// CONSTRUCTOR SUGAR

scoped :: String -> Scope -> Tag
export scoped = Tag(false)

negated :: String -> Scope -> Tag
export negated = Tag(true)

tag :: String -> Tag
export tag = scoped($, [])
untag :: String -> Tag
export untag = negated($, [])

// CHECKS

isWild :: Tag -> Boolean
export isWild = where {
  Wildcard =>
    true

  Tag(_, x, _) =>
    x == "*"
}

isNegated :: Tag -> Boolean
export isNegated = where {
  Tag(x, _, _) =>
    x

  Wildcard =>
    false
}

isScoped :: Tag -> Boolean
export isScoped = where {
  Tag(_, _, scope) =>
    List.length(scope) > 0

  Wildcard =>
    false
}

// ACCESSOR


getScope :: Tag -> Scope
export getScope = where {
  Tag(_, _, scope) =>
    scope

  Wildcard =>
    []
}

id :: Tag -> String
export id = where {
  Tag(_, name, _) =>
    name

  Wildcard =>
    "*"
}

// TRANSFORMS

// eventually we could actually Parse stuff
fromString :: String -> Tag
export fromString = (_part) => {
  pos = String.startsWith("-", _part)
  part = if (pos) {
    String.drop(1, _part)
  } else {
    _part
  }
  return pipe(
    String.trim,
    String.split(":"),
    (list) => {
      seg = List.length(list) == 1 ? [] : List.tail(list)
      return pipe(
        _firstAsString,
        Tag(pos, $, seg),
      )(list)
    },
  )(part)
}


tagScopeLength :: Tag -> Integer
export tagScopeLength = pipe(
  getScope,
  List.length,
)

compareTag :: Tag -> Tag -> Comparison
export compareTag = (a, b) => where(#[a, b]) {
  #[Tag(aNeg, aName, aScope), Tag(bNeg, bName, bScope)] =>
    if (bName == aName) {
      if (aNeg) {
        // aNeg ? LT : GT
        LT
      } else do {
        sA = List.length(aScope)
        sB = List.length(bScope)
        return if (sA == sB) {
          EQ
        } else if (sA > sB) {
          GT
        } else {
          LT
        }
      }
    } else if (aNeg) {
      aNeg ? GT : LT
    } else {
      EQ
    }

  #[Wildcard, Wildcard] =>
    EQ

  #[Wildcard, _] =>
    LT

  #[_, Wildcard] =>
    GT
}

hasScope :: Scope -> Tag -> Boolean
export hasScope = (testScope, t) => pipe(
  getScope,
  equals(testScope),
)(t)

_firstAsString :: List String -> String
_firstAsString = pipe(
  List.first,
  fromMaybe(""),
)

serialize :: Tag -> String
export serialize = (t) => {
  scope = pipe(
    getScope,
    String.join(":"),
  )(t)
  name = id(t)
  return name ++ (equals("", scope) ? "" : ":" ++ scope)
}

matches :: List Tag -> Tag -> Boolean
export matches = (xs, t) => {
  name = id(t)
  IO.pTrace("\ttesting " ++ name ++ " match tag ...", t)
  w = isWild(t)
  // w = true
  checked = pipe(
    List.filter(
      (x) => {
        e = equalsTag(x, t)
        o = x > t
        neg = isNegated(x)
        check = e && (neg || o)
        IO.pTrace(
          "\t"
            ++ Term.ansiColor(
              [check ? Term.ansi.FGBrightRed : Term.ansi.FGBrightYellow],
              (neg ? "-" : "") ++ id(x) ++ " vs. " ++ name,
            ),
          { check, wild: w, eq: e, above: o },
        )
        return check
      },
    ),
    (e) => {
      return if (!w && !List.isEmpty(e)) {
        true
      } else do {
        IO.pTrace("\tskipped", { name: id(t), t, e })
        return false
      }
    },
  )(xs)
  return w || checked
  // return true
}

_isEmptyTag :: Tag -> Boolean
_isEmptyTag = pipe(
  id,
  equals(""),
)

manyFromString :: String -> List Tag
export manyFromString = pipe(
  String.split(","),
  map(fromString),
  List.reject(_isEmptyTag),
)
