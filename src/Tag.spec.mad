import { EQ, GT, LT } from "Compare"
import Dict from "Dictionary"
import { assertEquals, test } from "Test"

import {
  Tag,
  compareTag,
  getScope,
  hasScope,
  inScope,
  isNegated,
  isScoped,
  manyFromString,
  matches,
  scoped,
  serialize,
  tag,
  untag,
} from "@/Tag"
import { demo, testCases } from "@/Test"



testparseMany = testCases(manyFromString)
testparseMany(
  "parseMany - single tags",
  {{ "yo": [scoped("yo", [])], "yo:scoped": [scoped("yo", ["scoped"])] }},
)
testparseMany(
  "parseMany - multiple tags",
  {{
    "a, b, spaced": [tag("a"), tag("b"), tag("spaced")],
    "a,b:belabor": [tag("a"), scoped("b", ["belabor"])],
  }},
)
testparseMany("parseMany - various garbage", {{ "": [], ",,": [], "::::,": [] }})

testCases(
  isScoped,
  "isScoped - testcase",
  Dict.fromList([#[Tag(true, "yo", []), false], #[Tag(true, "yo", ["yo"]), true]]),
)


testCases(
  getScope,
  "getScope",
  Dict.fromList([#[Tag(true, "yo", []), []], #[Tag(true, "yo", ["a", "b"]), ["a", "b"]]]),
)



test(
  "hasScope",
  () => do {
    _ <- assertEquals(hasScope(["a", "b"], scoped("nice", [])), false)
    return assertEquals(hasScope([], scoped("nice", [])), true)
  },
)
testCases(
  inScope(["a", "b", "c"]),
  "inScope b:c",
  Dict.fromList([
    #[scoped("x", ["a", "b", "c"]), true],
    #[scoped("x", ["a", "b", "c", "d"]), true],
    #[scoped("x", ["a", "b"]), false],
    #[scoped("x", []), true],
  ]),
)

testCases(
  serialize,
  "serialize",
  Dict.fromList([
    #[scoped("a", ["deeply", "nested", "value"]), "a:deeply:nested:value"],
    #[scoped("a", []), "a"],
  ]),
)

testCases(isNegated, "isNegated", Dict.fromList([#[untag("raw"), true], #[tag("raw"), false]]))

testCases(
  compareTag(tag("*")),
  "compareTag : *",
  Dict.fromList([#[tag("*"), EQ], #[tag("hello"), EQ]]),
)

demo(
  matches([
    scoped("a", []),
    scoped("info", ["deep"]),
    tag("warn"),
    tag("log"),
    scoped("issue", ["a", "b", "c"]),
    untag("ignore"),
  ]),
  "matches callable scope?",
  Dict.fromList([
    #[scoped("issue", ["a"]), true],
    #[scoped("issue", []), true],
    #[scoped("warn", ["a"]), true],
    #[scoped("warn", ["*"]), true],
    #[scoped("warn", ["x"]), true],
    #[scoped("issue", ["j"]), false],
    #[scoped("issue", ["a", "j"]), false],
    #[scoped("issue", ["a", "b", "j"]), false],
    #[scoped("issue", ["a", "b", "c"]), true],
    #[scoped("issue", ["a", "b", "c", "x"]), true],
    #[scoped("issue", ["a", "b", "c", "x", "*"]), true],
  ]),
)
