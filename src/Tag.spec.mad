import Dict from "Dictionary"
import { assertEquals, test } from "Test"

import {
  Tag,
  getScope,
  hasScope,
  isNegated,
  isScoped,
  parseMany,
  scopeEqual,
  scopeWithinScope,
  scopedTag,
  serializeTag,
  tag,
  tagInScope,
  untag,
} from "@/Tag"
import { testCases } from "@/Test"



testparseMany = testCases(parseMany)
testparseMany(
  "parseMany - single tags",
  {{ "yo": [scopedTag([], "yo")], "yo:scoped": [scopedTag(["scoped"], "yo")] }},
)
testparseMany(
  "parseMany - multiple tags",
  {{
    "a, b, spaced": [tag("a"), tag("b"), tag("spaced")],
    "a,b:belabor": [tag("a"), scopedTag(["belabor"], "b")],
  }},
)
testparseMany("parseMany - various garbage", {{ "": [], ",,": [], "::::,": [] }})

testCases(
  isScoped,
  "isScoped - testcase",
  Dict.fromList([#[Tag(true, [], "yo"), false], #[Tag(true, ["yo"], "yo"), true]]),
)


testCases(
  getScope,
  "getScope",
  Dict.fromList([#[Tag(true, [], "yo"), []], #[Tag(true, ["a", "b"], "yo"), ["a", "b"]]]),
)

test(
  "scopeEqual",
  () => do {
    return assertEquals(scopeEqual([], []), true)
  },
)

test(
  "hasScope",
  () => do {
    _ <- assertEquals(hasScope(["a", "b"], scopedTag([], "nice")), false)
    return assertEquals(hasScope([], scopedTag([], "nice")), true)
  },
)

test(
  "scopeWithinScope",
  () => do {
    _ <- assertEquals(scopeWithinScope(["a", "b", "c"], ["a"]), false)
    _ <- assertEquals(scopeWithinScope(["a", "b", "c"], []), true)
    _ <- assertEquals(scopeWithinScope([], []), true)
    return assertEquals(scopeWithinScope(["a", "b", "c"], ["a", "b", "c", "d"]), true)
  },
)

testCases(
  scopeWithinScope(["a", "b", "c"]),
  "scopeWithinScope a:b:c",
  {{ ["a"]: false, []: true, ["a", "b", "c", "d"]: true, ["a", "b", "c", "d", "e"]: true }},
)

testCases(scopeWithinScope([]), "scopeWithinScope *", {{ []: true }})

testCases(
  tagInScope(["a", "b", "c"]),
  "tagInScope b:c",
  Dict.fromList([
    #[scopedTag(["a", "b", "c"], "x"), true],
    #[scopedTag(["a", "b", "c", "d"], "x"), true],
    #[scopedTag(["a", "b"], "x"), false],
    #[scopedTag([], "x"), true],
  ]),
)

testCases(
  serializeTag,
  "serializeTag",
  Dict.fromList([
    #[scopedTag(["deeply", "nested", "value"], "a"), "a:deeply:nested:value"],
    #[scopedTag([], "a"), "a"],
  ]),
)

testCases(
  isNegated,
  "isNegated",
  Dict.fromList([
    #[untag("raw"), true],
  // #[tag("raw"), false]
  ]),
)
