import { EQ } from "Compare"
import Dict from "Dictionary"
import List from "List"
import { assertEquals, test } from "Test"

import Party from "@/PartyBus"
import { IN_SCOPE, OUT_OF_SCOPE, PARALLEL_SCOPE } from "@/Tag"
import {
  NoTag,
  Tag,
  Wildcard,
  compareTag,
  fromString,
  getConcreteScope,
  getScope,
  // inScope,
  isNegated,
  isScoped,
  manyFromString,
  matches,
  negated,
  scoped,
  serialize,
  tag,
  untag,
} from "@/Tag"
import { scopeFromList, scopeWithinScope } from "@/Tag/Scope"
import { analyze, report, reportBook } from "@/Test"



test__manyFromString = reportBook(manyFromString)
test__manyFromString(
  "manyFromString - single tags",
  {{ "yo": [scoped("yo", [])], "yo:scoped": [scoped("yo", ["scoped"])] }},
)
test__manyFromString(
  "manyFromString - multiple tags",
  {{
    "a, b, spaced": [tag("a"), tag("b"), tag("spaced")],
    "a,b:belabor": [tag("a"), scoped("b", ["belabor"])],
  }},
)
test__manyFromString("manyFromString - various garbage", {{ "": [], ",,": [], "::::,": [] }})

report(isScoped, "isScoped - testcase", [#[scoped("yo", []), false], #[scoped("yo", ["yo"]), true]])


report(
  getConcreteScope,
  "getConcreteScope",
  [#[scoped("yo", []), []], #[scoped("yo", ["a", "b"]), ["a", "b"]]],
)

report(
  serialize,
  "serialize",
  [#[scoped("a", ["deeply", "nested", "value"]), "a:deeply:nested:value"], #[scoped("a", []), "a"]],
)

report(isNegated, "isNegated", [#[untag("raw"), true], #[tag("raw"), false]])

report(
  matches([
    scoped("a", []),
    scoped("info", ["deep"]),
    tag("warn"),
    tag("log"),
    scoped("issue", ["a", "b", "c"]),
    untag("ignore"),
  ]),
  "matches :: List Tag -> Tag -> Boolean",
  [
    #[tag("warn"), true],
    #[scoped("warn", ["a"]), true],
    #[scoped("warn", ["b"]), true],
    #[scoped("warn", ["x"]), true],
    #[scoped("issue", ["j"]), false],
    #[scoped("issue", ["a"]), false],
    #[scoped("issue", []), false],
    #[scoped("issue", ["a", "j"]), false],
    #[scoped("issue", ["a", "b", "j"]), false],
    #[scoped("issue", ["a", "b", "c"]), true],
    #[scoped("issue", ["a", "b", "c", "d"]), true],
    #[scoped("issue", ["a", "b", "c", "d", "x"]), true],
    #[tag("ignore"), false],
  ],
)

// let's pretend!

NAMED_RULES = {
  // eating, just not in the kitchen
  eating: Party.allow("eating"),
  noEatingInTheKitchen: Party.avoidWithContext("eating", ["rooms", "kitchen"]),
  // talking, just not loudly to maria
  talking: Party.allow("talking"),
  noTalkingLoudlyToMaria: Party.avoidWithContext("talking", ["loudly", "to", "maria"]),
  // you can play anything 
  playing: Party.allow("playing"),
  // that isn't tv
  noPlayingTV: Party.avoidWithContext("playing", ["tv"]),
  // isn't a musical instrument
  noPlayingMusic: Party.avoidWithContext("playing", ["music"]),
  // unless it's a theremin
  noPlayingMusicExceptTheremin: Party.allowWithContext("playing", ["music", "theremin"]),
  // no singing
  noSinging: Party.avoid("singing"),
}

RULES = [
  NAMED_RULES.eating,
  NAMED_RULES.noEatingInTheKitchen,
  NAMED_RULES.talking,
  NAMED_RULES.noTalkingLoudlyToMaria,
  NAMED_RULES.playing,
  NAMED_RULES.noPlayingTV,
  NAMED_RULES.noPlayingMusic,
  NAMED_RULES.noPlayingMusicExceptTheremin,
  NAMED_RULES.noSinging,
]

report(
  fromString,
  "Tag.fromString",
  [
    #["a", tag("a")],
    #["a:b", scoped("a", ["b"])],
    #["a:b:c", scoped("a", ["b", "c"])],
    #["-a:b:c", negated("a", ["b", "c"])],
    #["-a:b", negated("a", ["b"])],
    #["-a", untag("a")],
    #["*", Wildcard],
    #["", NoTag],
  ],
)

report(
  scopeWithinScope(scopeFromList(["a", "b", "c"])),
  "scopeWithinScope -- a:b:c â†“",
  [
    #[scopeFromList(["a", "b", "c", "d"]), true],
    #[scopeFromList(["a", "b", "c", "d", "e"]), true],
    #[scopeFromList(["a", "b", "c"]), true],
    #[scopeFromList(["a", "b"]), false],
    #[scopeFromList(["a", "c"]), false],
    #[scopeFromList(["a"]), false],
  ],
)

report(
  compareTag(NAMED_RULES.eating),
  "compareTag - eating",
  [
    #[NAMED_RULES.eating, IN_SCOPE],
    #[scoped("eating", ["outside"]), IN_SCOPE],
  // #[Wildcard, IN_SCOPE],
  // #[NoTag, OUT_OF_SCOPE],
  ],
)
