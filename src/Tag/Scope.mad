import IO from "IO"
import { isEmpty, length } from "List"
import List from "List"
import Set from "Set"
import String from "String"



export type Scope = Scope(Set String) | NoScope

// scopeFromString :: String -> Scope
// scopeFromString = isEmpty(

scopeFromList :: List String -> Scope
export scopeFromList = (strs) => {
  cleaned = pipe(
    map(String.trim),
    List.reject(String.isEmpty),
    isEmpty,
  )(strs)
  return if (cleaned) {
    NoScope
  } else {
    pipe(
      Set.fromList,
      Scope,
    )(strs)
  }
}

scopeLength :: Scope -> Integer
export scopeLength = where {
  Scope(l) =>
    Set.length(l)

  NoScope =>
    0
}

scopeWithinScope :: Scope -> Scope -> Boolean
export scopeWithinScope = (a, z) => where(#[a, z]) {
  #[Scope(outer), Scope(inner)] =>
    pipe(
      Set.diff(outer),
      (d) => d == Set.empty,
    )(inner)

  #[_, _] =>
    false
}
